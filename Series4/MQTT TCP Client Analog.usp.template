#CATEGORY "31" // Digital Operations
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#ANALOG_SERIAL_EXPAND AllWithAny
#SYMBOL_NAME "MQTTClient Analog 1.0 {{VARIATION}} (Series 4)"
#USER_SIMPLSHARP_LIBRARY "SimplMqttClient"

STRING_PARAMETER Username[20];
STRING_PARAMETER Password[20];
STRING_PARAMETER SSLCertificateFileName[30];
STRING_PARAMETER SSLPrivateKeyFileName[30];
INTEGER_PARAMETER Port;
STRING_PARAMETER ServerIP[14];
INTEGER_PARAMETER BufferSize;
INTEGER_PARAMETER KeepAlivePeriod;
STRING_PARAMETER ID[20];
INTEGER_PARAMETER WillFlag;
INTEGER_PARAMETER WillRetain;
INTEGER_PARAMETER WillQoS;
STRING_PARAMETER WillTopic[20];
STRING_PARAMETER WillMessage[255];
INTEGER_PARAMETER PublishQoSLevel;
INTEGER_PARAMETER Retain;
INTEGER_PARAMETER CleanSession;
STRING_PARAMETER _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,Topic[255][20];
STRING_OUTPUT ErrorOccured;
DIGITAL_INPUT _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_
,Log,Start,Stop;
ANALOG_INPUT LogLevel;
ANALOG_INPUT _skip_,_skip_,_skip_,_skip_,PUBLISH_TO_TOPIC[255];
DIGITAL_OUTPUT _skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,_skip_,ConnectionState,_skip_,_skip_,_skip_;
ANALOG_OUTPUT _skip_,_skip_,_skip_,TopicMessage[255];


//Patameters properties
#BEGIN_PARAMETER_PROPERTIES WillRetain , WillFlag , Retain , CleanSession
propDefaultValue = 0d;
propList= { 0d ,"false" },{ 1d , "true" };                       
#BEGIN_PROP_FULL_DESCRIPTION
#END_PROP_FULL_DESCRIPTION
#BEGIN_PROP_NOTES
#END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES WillQoS
propDefaultValue = 0d;
propList= { 0d ,"QoS0" },{ 1d , "QoS 1" };                       
#BEGIN_PROP_FULL_DESCRIPTION
#END_PROP_FULL_DESCRIPTION
#BEGIN_PROP_NOTES
#END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Port
propDefaultUnit = unitDecimal;
propBounds= 1025d , 65535d;   
propDefaultValue = 1883d;
propShortDescription= "Connection Port";                
#BEGIN_PROP_FULL_DESCRIPTION
#END_PROP_FULL_DESCRIPTION
#BEGIN_PROP_NOTES
  "RFC 1700 , the first not reserved port is the 1025"
#END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES BufferSize
propDefaultUnit = unitDecimal;   
propDefaultValue = 255d;
propShortDescription= "Data buffer size";                               
#BEGIN_PROP_FULL_DESCRIPTION
#END_PROP_FULL_DESCRIPTION
#BEGIN_PROP_NOTES
#END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES KeepAlivePeriod
propDefaultUnit = unitTime;   
propDefaultValue = 100s;
propShortDescription= "Keep Alive period in seconds";                               
#BEGIN_PROP_FULL_DESCRIPTION
#END_PROP_FULL_DESCRIPTION
#BEGIN_PROP_NOTES
#END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES Topic   
propShortDescription= "Name of the topic";                               
#BEGIN_PROP_FULL_DESCRIPTION
#END_PROP_FULL_DESCRIPTION
#BEGIN_PROP_NOTES
#END_PROP_NOTES
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES PublishQoSLevel
propDefaultValue = 0d;
propList= { 0d ,"QoS0" },{ 1d , "QoS 1" };                       
#BEGIN_PROP_FULL_DESCRIPTION
#END_PROP_FULL_DESCRIPTION
#BEGIN_PROP_NOTES
#END_PROP_NOTES
#END_PARAMETER_PROPERTIES


MqttClient client;
ClientType cType;

function PassTopics()
{
	integer arraySize , i;
	arraySize = GetNumArrayCols(Topic);
	for(i = 1 to arraySize  )
	{
		if(Topic[i] = "")
		{
			break;			
		}
		client.AddTopic(Topic[i]);
	}
}

THREADSAFE CHANGE PUBLISH_TO_TOPIC
{
	integer i;
	i = GetLastModifiedArrayIndex ();
	client.Publish(Topic[i],ITOA(PUBLISH_TO_TOPIC[i]));
	
}

THREADSAFE CHANGE LogLevel
{
	client.SetLogLevel(LogLevel);
}

THREADSAFE CHANGE Log
{
	client.Log(Log);
}

THREADSAFE PUSH Start
{
	client.Start();
}

THREADSAFE PUSH Stop
{
	client.Stop();
}


function Init()

{
	RegisterEvent (client, MessageArrived, MessageArrivedEventHandler);
	RegisterEvent (client, ErrorOccured, ErrorOccuredEventHandler);
	RegisterEvent (client, ConnectionStateChanged, ConnectionStateChangedEventHandler);
}

eventhandler ConnectionStateChangedEventHandler(MqttClient client , ConnectionStateChangedEventArgs e)
{
	ConnectionState = e.State;
}


eventhandler ErrorOccuredEventHandler(MqttClient client , ErrorOccuredEventArgs e)
{
	ErrorOccured = e.ErrorMessage;
}

eventhandler MessageArrivedEventHandler(MqttClient client, MessageReceivedEventArgs e)                                                                       
{
	integer arraySize , i;
	arraySize = GetNumArrayCols(Topic);
	for(i = 1 to arraySize)
	{
		if(Topic[i] = e.Topic)
		{	
			TopicMessage[i] = Atoi(e.Value);		
		}	
	}
}
CMutex mutex;

function Main()
{
	WaitForInitializationComplete();
	mutex.WaitForMutex(); 
	cType = ClientType.ANALOG;
	client.Log(Log);
	client.Initialize(Username,Password,Port,ServerIP,BufferSize,ID,WillFlag,WillRetain,WillQos,WillTopic,WillMessage,KeepAlivePeriod,cType,PublishQoSLevel,Retain,CleanSession,SSLCertificateFileName,SSLPrivateKeyFileName);
	init();
	PassTopics();
	mutex.ReleaseMutex(); 

}




